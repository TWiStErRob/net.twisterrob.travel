<?xml version="1.0" encoding="utf-8"?>

<appengine-web-app
		xmlns="http://appengine.google.com/ns/1.0"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://appengine.google.com/ns/1.0 https://raw.githubusercontent.com/GoogleCloudPlatform/google-cloud-eclipse/master/plugins/com.google.cloud.tools.eclipse.appengine.validation/xsd/appengine-web.xsd"
	>
	<application>twisterrob-london</application>
	<version>live</version>
	<runtime>java8</runtime>

	<!-- Allows App Engine to send multiple requests to one instance in parallel. -->
	<threadsafe>true</threadsafe>

	<system-properties>
		<property name="appengine.file.encoding" value="UTF-8"/>
		<!-- Configure JUL -> SLF4J -> Log4J routing, see config files for more -->
		<!-- TODO figure out how to add this property only at dev time -->
		<property name="java.util.logging.config.file" value="WEB-INF/java.util.logging.properties" />
		<property name="log4j.configurationFile" value="WEB-INF/log4j2.xml" />
		<!-- Helps diagnose when logs don't appear correctly -->
		<property name="log4j.debug" value="false" />
		<!-- Allow ${foo.new} EL expression (new is a Java keyword) -->
		<!-- See also https://thinkinginsoftware.blogspot.com/2011/10/tomcat-7-jstl-failed-to-parse.html -->
		<property name="org.apache.el.parser.SKIP_IDENTIFIER_CHECK" value="true" />
	</system-properties>

	<!-- HTTP Sessions are disabled by default. To enable HTTP sessions specify: -->
	<sessions-enabled>true</sessions-enabled>

	<!-- It's possible to reduce request latency by configuring your application to asynchronously write HTTP session data to the datastore.
		With this feature enabled, there is a very small chance your app will see stale session data. For details, see
		http://code.google.com/appengine/docs/java/config/appconfig.html#Enabling_Sessions -->
	<async-session-persistence enabled="true" />
</appengine-web-app>
