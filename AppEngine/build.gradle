apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine'
apply plugin: 'com.google.cloud.tools.endpoints-framework-server'
apply plugin: 'idea'

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

configurations {
	dev
}
idea {
	module {
		scopes.PROVIDED.plus += [ configurations.dev ]
	}
}

dependencies {
	// com.google.appengine.api.datastore
	implementation("com.google.appengine:appengine-api-1.0-sdk:${VERSION_APPENGINE}")
	// com.google.api.server.spi.EndpointsServlet
	implementation("com.google.endpoints:endpoints-framework:${VERSION_GCLOUD_ENDPOINTS}")

	providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
	dev("org.apache.taglibs:taglibs-standard-impl:1.2.5")
	dev("javax.servlet.jsp.jstl:jstl-api:1.2")

	implementation project(':Shared')

	// See java.util.logging.properties and log4j2.xml
	implementation("org.slf4j:slf4j-api:${VERSION_SLF4J}")
	// route apps SLF4J logging to JUL
	implementation("org.slf4j:slf4j-jdk14:${VERSION_SLF4J}")
	dev("org.slf4j:jul-to-slf4j:${VERSION_SLF4J}")
	dev("org.apache.logging.log4j:log4j-api:${VERSION_LOG4J}")
	dev("org.apache.logging.log4j:log4j-core:${VERSION_LOG4J}")
	dev("org.apache.logging.log4j:log4j-slf4j-impl:${VERSION_LOG4J}")

	// for org.apache.tools.ant.filters.StringInputStream
	implementation("ant:ant:1.6.5")

	apply from: "${rootDir}/gradle/testCompile.gradle", to: project
	testImplementation("com.google.appengine:appengine-testing:${VERSION_APPENGINE}")
	testImplementation("com.google.appengine:appengine-api-stubs:${VERSION_APPENGINE}")
	testImplementation("com.google.appengine:appengine-api-labs:${VERSION_APPENGINE}")
}

sourceSets {
	main {
		java.srcDir 'src/main/diff'
		compileClasspath += configurations.dev
	}
	test {
		java.srcDir 'src/test/diff'
		compileClasspath += configurations.dev
	}
}

appengine { com.google.cloud.tools.gradle.appengine.standard.AppEngineStandardExtension ext ->
	deploy {
		projectId = "twisterrob-london"
		version = "GCLOUD_CONFIG"
	}
	run {
		port = 8888
		automaticRestart = true

		def logDependencyFilter = { Dependency d -> d.group?.contains('slf4j') || d.group?.contains('log4j') };
		def deps = configurations.dev.dependencies.findAll logDependencyFilter
		def flags = configurations.dev.files(deps as Dependency[]) \
				.collect { "-Xbootclasspath/p:${it.absolutePath}".toString() }
		jvmFlags = (jvmFlags?: [ ]) + flags
	}
	tools {
		cloudSdkHome = System.getenv("GCLOUD_HOME")?: file("build/downloaded/gcloud-sdk")
		cloudSdkVersion = VERSION_GCLOUD_SDK as String
		// https://cloud.google.com/sdk/gcloud/reference#--verbosity
		verbosity = "info"
	}
}

endpointsServer {
	hostname = "twisterrob-london.appspot.com"
}
