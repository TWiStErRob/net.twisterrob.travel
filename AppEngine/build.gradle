apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.google.cloud.tools.appengine-appenginewebxml'
//apply plugin: 'com.google.cloud.tools.endpoints-framework-server'
apply plugin: 'idea'

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
	// com.google.appengine.api.datastore
	implementation("com.google.appengine:appengine-api-1.0-sdk:${VERSION_APPENGINE}")
	// com.google.api.server.spi.EndpointsServlet
	implementation("com.google.endpoints:endpoints-framework:${VERSION_GCLOUD_ENDPOINTS}")

	//noinspection GradleDeprecatedConfiguration
	providedCompile("javax.servlet:javax.servlet-api:3.1.0")
	runtimeOnly("org.apache.taglibs:taglibs-standard-impl:1.2.5")
	runtimeOnly("javax.servlet.jsp.jstl:jstl-api:1.2")

	implementation project(':Shared')

	implementation("org.slf4j:slf4j-api:${VERSION_SLF4J}")
	// for org.apache.tools.ant.filters.StringInputStream
	implementation("ant:ant:1.6.5")

	apply from: "${rootDir}/gradle/testCompile.gradle", to: project
	testImplementation("com.google.appengine:appengine-testing:${VERSION_APPENGINE}")
	testImplementation("com.google.appengine:appengine-api-stubs:${VERSION_APPENGINE}")
	testImplementation("com.google.appengine:appengine-api-labs:${VERSION_APPENGINE}")
}

sourceSets {
	main {
		java.srcDir 'src/main/diff'
	}
	test {
		java.srcDir 'src/test/diff'
	}
}

//noinspection UnnecessaryQualifiedReference
appengine { com.google.cloud.tools.gradle.appengine.standard.AppEngineStandardExtension ext ->
	deploy {
		// Live: https://twisterrob-london.appspot.com/
		projectId = "twisterrob-london"
		version = "GCLOUD_CONFIG"
	}
	run {
		port = 8888
		automaticRestart = true
		jvmFlags = (jvmFlags?: [ ]) + [
				//"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"
		]
	}
	tools {
		System.getenv("GCLOUD_HOME")?.tap { cloudSdkHome = it }
		cloudSdkVersion = VERSION_GCLOUD_SDK as String
		// https://cloud.google.com/sdk/gcloud/reference#--verbosity
		verbosity = "info"
	}
}

tasks.named("explodeWar").configure { mustRunAfter("appengineStop") }
tasks.named("appengineRun").configure { mustRunAfter("appengineStop") }
