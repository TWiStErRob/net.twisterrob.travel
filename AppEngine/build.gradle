apply plugin: 'java'
apply plugin: 'io.micronaut.application'
apply plugin: 'com.google.cloud.tools.appengine-appyaml'
apply plugin: 'idea'

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
	//noinspection GradleDeprecatedConfiguration
	//providedCompile("com.google.appengine:appengine:${VERSION_APPENGINE}")
	implementation platform('com.google.cloud:libraries-bom:26.27.0')
	implementation("com.google.cloud:google-cloud-datastore")

	//noinspection GradleDeprecatedConfiguration
	//providedCompile("javax.servlet:javax.servlet-api:3.1.0")
	//runtimeOnly("org.apache.taglibs:taglibs-standard-impl:1.2.5")
	//runtimeOnly("javax.servlet.jsp.jstl:jstl-api:1.2")

	implementation project(':Shared')

	implementation("org.slf4j:slf4j-api:${VERSION_SLF4J}")
	// for org.apache.tools.ant.filters.StringInputStream
	implementation("ant:ant:1.6.5")

	apply from: "${rootDir}/gradle/testCompile.gradle", to: project
//	testImplementation("com.google.appengine:appengine-testing:${VERSION_APPENGINE}")
//	testImplementation("com.google.appengine:appengine-api-stubs:${VERSION_APPENGINE}")
//	testImplementation("com.google.appengine:appengine-api-labs:${VERSION_APPENGINE}")
}

sourceSets {
	main {
		java.srcDir 'src/main/diff'
	}
	test {
		java.srcDir 'src/test/diff'
	}
}

dependencies {
	annotationProcessor("io.micronaut:micronaut-http-validation")
	annotationProcessor("io.micronaut.serde:micronaut-serde-processor")
	implementation("io.micronaut.serde:micronaut-serde-jackson")
	implementation("io.micronaut.servlet:micronaut-servlet-engine")
	implementation("io.micronaut.views:micronaut-views-handlebars")
	compileOnly("io.micronaut:micronaut-http-client")
	runtimeOnly("ch.qos.logback:logback-classic")
	testImplementation("io.micronaut:micronaut-http-client")
}

application {
	mainClass.set("net.twisterrob.blt.gapp.Application")
}

graalvmNative.toolchainDetection = false
micronaut {
	//version = VERSION_MICRONAUT as String
	runtime("jetty")
	testRuntime("junit4")
	processing {
		incremental(true)
		annotations("net.twisterrob.blt.gapp.*")
	}
}

tasks.named("run").configure { JavaExec task ->
	if (gradle.startParameter.continuous) {
		task.systemProperties(
				"micronaut.io.watch.restart": true,
				"micronaut.io.watch.enabled": true,
				"micronaut.io.watch.paths": "src/main",
		)
	}
	doFirst {
		def stream = new ByteArrayOutputStream()
		exec {
			commandLine("gcloud.cmd", "beta", "emulators", "datastore", "env-init")
			standardOutput = stream
		}
		Map<String, String> env = stream.toString().split("\r?\n").collectEntries { line ->
			if (!line.startsWith("set ")) {
				throw new IllegalStateException("Unexpected line: $line in \n${stream.toString()}")
			}
			def (key, value) = line.substring(4).split("=", 2)
			[ key, value ]
		}
		task.environment(env)
	}
}

//noinspection UnnecessaryQualifiedReference
appengine { com.google.cloud.tools.gradle.appengine.appyaml.AppEngineAppYamlExtension ext ->
	deploy {
		// Live: https://twisterrob-london.appspot.com/
		projectId = "twisterrob-london"
		version = "GCLOUD_CONFIG"
	}
	tools {
		System.getenv("GCLOUD_HOME")?.tap { cloudSdkHome = it }
		cloudSdkVersion = VERSION_GCLOUD_SDK as String
		// https://cloud.google.com/sdk/gcloud/reference#--verbosity
		verbosity = "info"
	}
}
