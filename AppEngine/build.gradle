import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
	id("net.twisterrob.blt.convention")
	id("org.gradle.java")
	id("io.micronaut.minimal.application")
	id("com.google.cloud.tools.appengine-appyaml")
	id("org.gradle.idea")
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

dependencies {
	implementation("com.google.appengine:appengine-api-1.0-sdk:2.0.12")
	implementation(platform("com.google.cloud:libraries-bom:${VERSION_GCLOUD}"))
	implementation("com.google.cloud:google-cloud-datastore")

	runtimeOnly("org.yaml:snakeyaml")
	runtimeOnly("io.micronaut.serde:micronaut-serde-jackson")
	implementation("io.micronaut.views:micronaut-views-handlebars")

	implementation project(":Shared")
	implementation(project(":Shared:diff"))

	implementation("org.slf4j:slf4j-api:${VERSION_SLF4J}")
	runtimeOnly("org.apache.logging.log4j:log4j-slf4j2-impl:${VERSION_LOG4J}")

	testImplementation(project(":Shared:test-helpers"))
	testImplementation("io.micronaut:micronaut-http-client")
	testImplementation("com.github.jtidy:jtidy:${VERSION_JTIDY}")
}

//noinspection UnnecessaryQualifiedReference
appengine { com.google.cloud.tools.gradle.appengine.appyaml.AppEngineAppYamlExtension ext ->
	stage {
		artifact = file("src/main/appengine/placeholder.txt")
		// AppEngine plugin can't handle laziness, wire manually.
		tasks.appengineStage.dependsOn(tasks.installDist)
		extraFilesDirectories = tasks.installDist
	}
	deploy {
		// Live: https://twisterrob-london.appspot.com/
		projectId = "twisterrob-london"
		version = "GCLOUD_CONFIG"
		// Test deployment:
		//version = "test"
		//stopPreviousVersion = false
		//promote = false
	}
	tools {
		System.getenv("GCLOUD_HOME")?.tap { cloudSdkHome = it }
		cloudSdkVersion = VERSION_GCLOUD_SDK as String
		// https://cloud.google.com/sdk/gcloud/reference#--verbosity
		verbosity = "info"
	}
}

application {
	mainClass = "net.twisterrob.blt.gapp.Application"
}

micronaut {
	version = VERSION_MICRONAUT as String
	runtime("jetty")
	testRuntime("junit4")
	processing {
		incremental(true)
		annotations("net.twisterrob.blt.gapp.*")
	}
}

tasks.named("run").configure { JavaExec task ->
	if (DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
		task.systemProperty("log4j.skipJansi", false)
	}
	if (gradle.startParameter.continuous) {
		task.systemProperties(
				// TODO use https://docs.micronaut.io/latest/guide/index.html#environments to create overrides for debug.
				"micronaut.io.watch.enabled": true,
				"micronaut.io.watch.restart": true,
				"micronaut.io.watch.paths": "src/main",
		)
	}
	doFirst {
		def stream = new ByteArrayOutputStream()
		exec {
			commandLine("gcloud.cmd", "beta", "emulators", "datastore", "env-init")
			standardOutput = stream
		}
		Map<String, String> env = stream.toString().split("\r?\n").collectEntries { line ->
			if (!line.startsWith("set ")) {
				throw new IllegalStateException("Unexpected line: $line in \n${stream.toString()}")
			}
			def (key, value) = line.substring(4).split("=", 2)
			[ key, value ]
		}
		task.environment(env)
	}
}
