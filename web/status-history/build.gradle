import org.gradle.api.internal.GradleInternal
import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
	id("net.twisterrob.blt.convention")
	id("org.jetbrains.kotlin.jvm")
	id("com.google.devtools.ksp")
	id("io.micronaut.minimal.application")
	id("com.google.cloud.tools.appengine-appyaml")
	id("org.gradle.idea")
}

java.toolchain.languageVersion = JavaLanguageVersion.of(libs.versions.java.appengine.get())
kotlin.jvmToolchain { languageVersion = JavaLanguageVersion.of(libs.versions.java.appengine.get()) }

dependencies {
	implementation(libs.appengine.api)
	implementation(platform(libs.google.cloud))
	implementation(libs.google.cloud.datastore)
	implementation(libs.google.cloud.secrets)

	runtimeOnly(libs.snakeyaml)
	runtimeOnly(libs.micronaut.jackson)
	implementation(libs.micronaut.handlebars)
	implementation(libs.micronaut.httpClient)
	implementation(libs.micronaut.jackson)

	implementation(projects.domain.status)
	implementation(projects.common.data.static)
	implementation(projects.common.feed.feeds)
	implementation(projects.common.feed.trackernet)
	runtimeOnly(projects.common.androidPolyfill)
	implementation(projects.common.diff)

	implementation(libs.slf4j.api)
	runtimeOnly(libs.log4j.slf4j2)

	testImplementation(projects.common.testHelpers) {
		exclude(group: "org.slf4j", module: "slf4j-simple")
	}
	testImplementation(libs.micronaut.httpClient)
	testImplementation(libs.jtidy)
}

//noinspection UnnecessaryQualifiedReference
appengine { com.google.cloud.tools.gradle.appengine.appyaml.AppEngineAppYamlExtension ext ->
	stage {
		artifact = file("src/main/appengine/placeholder.txt")
		// AppEngine plugin can't handle laziness, wire manually.
		tasks.appengineStage.dependsOn(tasks.installDist)
		extraFilesDirectories = tasks.installDist
	}
	deploy {
		// Live: https://twisterrob-london.appspot.com/
		projectId = "twisterrob-london"
		version = "GCLOUD_CONFIG"
		def testDeployment = true
		if (testDeployment) {
			version = "test"
			stopPreviousVersion = false
			// Updating service [default]... is normal
			promote = false
		}
	}
	tools {
		System.getenv("GCLOUD_HOME")?.tap { cloudSdkHome = it }
		cloudSdkVersion = libs.versions.google.cloud.sdk.get()
		// https://cloud.google.com/sdk/gcloud/reference#--verbosity
		verbosity = "info"
	}
}

application {
	mainClass = "net.twisterrob.travel.statushistory.Application"
}

micronaut {
	version = libs.versions.micronaut.asProvider().get()
	runtime("jetty")
	testRuntime("junit5")
	processing {
		incremental(true)
	}
}

tasks.named("run").configure { JavaExec task ->
	if (DefaultNativePlatform.getCurrentOperatingSystem().isWindows()) {
		task.systemProperty("log4j.skipJansi", false)
	}
	if (gradle.startParameter.continuous) {
		task.systemProperties(
				// TODO use https://docs.micronaut.io/latest/guide/index.html#environments to create overrides for debug.
				"micronaut.io.watch.enabled": true,
				"micronaut.io.watch.restart": true,
				"micronaut.io.watch.paths": "src/main",
		)
	}
	def exec = (gradle as GradleInternal).services.get(ExecOperations.class)
	doFirst {
		def stream = new ByteArrayOutputStream()
		exec.exec {
			commandLine("gcloud.cmd", "beta", "emulators", "datastore", "env-init")
			standardOutput = stream
		}
		Map<String, String> env = stream.toString().split("\r?\n").collectEntries { line ->
			if (!line.startsWith("set ")) {
				throw new IllegalStateException("Unexpected line: $line in \n${stream.toString()}")
			}
			def (key, value) = line.substring(4).split("=", 2)
			[ key, value ]
		}
		task.environment(env)
	}
}

//noinspection UnnecessaryQualifiedReference
[
		// com.google.cloud.tools.gradle.appengine.core.CheckCloudSdkTask.class, // OK
		com.google.cloud.tools.gradle.appengine.core.DownloadCloudSdkTask.class, // getProject()
		com.google.cloud.tools.gradle.appengine.core.GcloudTask.class, // DeployExtension.gradleProject (except CloudSdkLoginTask)
		com.google.cloud.tools.gradle.appengine.core.ShowConfigurationTask.class, // getProject()
		com.google.cloud.tools.gradle.appengine.appyaml.StageAppYamlTask.class, // StageAppYamlExtension.project + getProject()
		com.google.cloud.tools.gradle.appengine.standard.StageStandardTask.class, // StageStandardExtension.project + getProject()
		com.google.cloud.tools.gradle.appengine.standard.DevAppServerRunTask.class, // RunExtension.project
		com.google.cloud.tools.gradle.appengine.standard.DevAppServerStartTask.class, // RunExtension.project
		com.google.cloud.tools.gradle.appengine.standard.DevAppServerStopTask.class, // RunExtension.project
		com.google.cloud.tools.gradle.appengine.sourcecontext.GenRepoInfoFileTask.class, // GenRepoInfoFileExtension.project
].each {
	tasks.withType(it).configureEach {
		notCompatibleWithConfigurationCache("https://github.com/GoogleCloudPlatform/app-gradle-plugin/issues/454")
	}
}
