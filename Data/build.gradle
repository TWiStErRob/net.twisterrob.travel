plugins {
	id("net.twisterrob.blt.convention")
	id("org.gradle.java-library")
	id("net.twisterrob.gradle.plugin.java")
	id("org.gretty")
	id("org.gradle.idea")
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

// name = "twister-travel-data"
version = "0.0.1-SNAPSHOT"
// <name>Better London Travel Data Generation</name>
// <description>Standalone project to handle large feeds</description>

dependencies {
	api(project(":Shared"))
	implementation("com.google.code.findbugs:jsr305:${VERSION_JSR305}")
	implementation("org.slf4j:slf4j-api:${VERSION_SLF4J}")
	runtimeOnly("org.slf4j:slf4j-simple:${VERSION_SLF4J}")
	implementation("org.xerial:sqlite-jdbc:3.7.15-M1")

	testImplementation(project(":Shared:test-helpers"))
}

// TODO logging doesn't work with org.eclipse nor org.mortbay package names
// -Dorg.mortbay.log.class=org.eclipse.jetty.util.log.StrErrLog changes the logger, but no output
// --debug logs, but too much and not configurable
gretty { // org.akhikhl.gretty.GrettyExtension
	//daemon = true
	extraResourceBase(file("src/data"))

	// + Magic @Delegate org.akhikhl.gretty.ServerConfig through GrettyExtension implements GrettyConfig
	httpPort = 8081
	liveReloadEnabled = false
	managedClassReload = false

	// + Magic @Delegate org.akhikhl.gretty.WebAppConfig through GrettyExtension implements GrettyConfig
}

idea {
	module {
		excludeDirs = [
			file("output"),
			file("src/data"),
		]
	}
}

tasks.register("runNetwork", JavaExec.class) {
	def inputDir = "../temp/feed15/LULDLRRiverTramCable"
	def outputDir = "output"
	inputs.dir(inputDir).withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("src/data/PredictionSummary")
	outputs.dir(outputDir)
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = sourceSets.main.runtimeClasspath
	mainClass = "net.twisterrob.blt.data.apps.TravelNetworkParser"
	args = [ inputDir, outputDir ]
	enableAssertions = true
}

tasks.register("runPostCode", JavaExec.class) {
	def inputDir = "../temp/feed15/LULDLRRiverTramCable"
	def outputFile = "output/LondonTravel.data.AreaHull.sql"
	inputs.dir(inputDir).withPathSensitivity(PathSensitivity.RELATIVE)
	outputs.file(outputFile)
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = sourceSets.main.runtimeClasspath
	mainClass = "net.twisterrob.blt.data.apps.PostCodeAreas"
	enableAssertions = true
}

tasks.register("runDisplay", JavaExec.class) {
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = sourceSets.main.runtimeClasspath
	mainClass = "net.twisterrob.blt.data.apps.DisplayLine"
	args = [ "DLR" ]
	if (project.hasProperty("lines")) {
		args = project.property("lines").toString().split(",") as List
	}
	enableAssertions = true
}
