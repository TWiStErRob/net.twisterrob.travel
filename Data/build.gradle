plugins {
	id("net.twisterrob.blt.convention")
	id("org.gradle.java-library")
	id("net.twisterrob.gradle.plugin.java")
	id("org.gretty")
	id("org.gradle.idea")
}

java {
	sourceCompatibility = libs.versions.java.asProvider().get()
	targetCompatibility = libs.versions.java.asProvider().get()
}

// name = "twister-travel-data"
version = "0.0.1-SNAPSHOT"
// <name>Better London Travel Data Generation</name>
// <description>Standalone project to handle large feeds</description>

dependencies {
	api(projects.shared)
	implementation(libs.jsr305)
	implementation(libs.slf4j.api)
	implementation(libs.slf4j.simple)
	implementation(libs.sqlite.jdbc)

	testImplementation(projects.shared.testHelpers)
}

// TODO logging doesn't work with org.eclipse nor org.mortbay package names
// -Dorg.mortbay.log.class=org.eclipse.jetty.util.log.StrErrLog changes the logger, but no output
// --debug logs, but too much and not configurable
gretty { // org.akhikhl.gretty.GrettyExtension
	//daemon = true
	extraResourceBase(file("src/data"))

	// + Magic @Delegate org.akhikhl.gretty.ServerConfig through GrettyExtension implements GrettyConfig
	httpPort = 8081
	managedClassReload = false

	// + Magic @Delegate org.akhikhl.gretty.WebAppConfig through GrettyExtension implements GrettyConfig
	//...
}

idea {
	module {
		excludeDirs = [
			file("output"),
			file("src/data"),
		]
	}
}

tasks.register("runNetwork", JavaExec.class) {
	def inputDir = "../temp/feed15/LULDLRRiverTramCable"
	def outputDir = "output"
	inputs.dir(inputDir).withPathSensitivity(PathSensitivity.RELATIVE)
	inputs.dir("src/data/PredictionSummary")
	outputs.dir(outputDir)
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = sourceSets.main.runtimeClasspath
	mainClass = "net.twisterrob.blt.data.apps.TravelNetworkParser"
	args = [ inputDir, outputDir ]
	enableAssertions = true
	logging.captureStandardOutput LogLevel.INFO
}

tasks.register("runPostCode", JavaExec.class) {
	def inputDir = "../temp/feed15/LULDLRRiverTramCable"
	def outputFile = "output/LondonTravel.data.AreaHull.sql"
	inputs.dir(inputDir).withPathSensitivity(PathSensitivity.RELATIVE)
	outputs.file(outputFile)
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = sourceSets.main.runtimeClasspath
	mainClass = "net.twisterrob.blt.data.apps.PostCodeAreas"
	enableAssertions = true
}

tasks.register("runDisplay", JavaExec.class) {
	group = ApplicationPlugin.APPLICATION_GROUP
	classpath = sourceSets.main.runtimeClasspath
	mainClass = "net.twisterrob.blt.data.apps.DisplayLine"
	args = [ "DLR" ]
	if (project.hasProperty("lines")) {
		args = project.property("lines").toString().split(",") as List
	}
	enableAssertions = true
}
