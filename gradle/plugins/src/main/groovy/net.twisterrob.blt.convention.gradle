pluginManager.withPlugin("org.gradle.java-base") {
	java {
		sourceCompatibility = libs.versions.java.asProvider().get()
		targetCompatibility = libs.versions.java.asProvider().get()
	}

	tasks.withType(JavaCompile).configureEach {
		options.encoding = "UTF-8"
		options.compilerArgs += [
				"-Werror",
				"-Xmaxwarns", "1000",
				"-Xmaxerrs", "1000",
				"-Xlint:all",
				"-Xlint:-processing",
		]
	}
}

pluginManager.withPlugin("com.android.base") {
	android {
		compileOptions {
			sourceCompatibility = libs.versions.java.android.get()
			targetCompatibility = libs.versions.java.android.get()
		}
	}
}

pluginManager.withPlugin("com.android.lint") {
	lint {
		checkAllWarnings = true
		warningsAsErrors = true
		lintConfig = rootProject.file("config/lint/lint.xml")
		baseline = rootProject.file("config/lint/lint-baseline${project.path.replace(":", "-")}.xml")
		enable += "StopShip"
	}
}

if (project.gradle.startParameter.isConfigurationCacheRequested()) {
	// TODEL https://github.com/TWiStErRob/net.twisterrob.gradle/issues/511
	project.plugins.withId("com.android.application") {
		project.VCS.setCurrent$twister_convention_versioning(new net.twisterrob.gradle.vcs.VCSExtension() {
			@Override boolean isAvailableQuick() { return false }
			@Override boolean isAvailable() { return isAvailableQuick() }
			@Override String getRevision() { return "no VCS" }
			@Override int getRevisionNumber() { return 0 }
			@Override FileCollection files(Project project) { return project.files() }
		})
	}
}
